@charset "UTF-8";
/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  -moz-box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  cursor: pointer;
  /* 2 */
  -webkit-appearance: button;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  box-sizing: content-box;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  -webkit-appearance: textfield;
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

/**
 * Map of predefined constants
 */
/** 
 * Layouts map
 */
/**
 * Set up layout-relevant globals
 */
/**
 * Sets a value in an existing map.
 * @param {Map}     $map   Map the value will be set in.
 * @param {String}  $key   Key the value will be set for.
 * @param {Misc}    $value Value to be set.
 */
/**
 * Merges to SASS maps recursively
 * @param  {Map}  $map1 Map to be merged into.
 * @param  {Map}  $map2 Map to be merged into $map1.
 * @return {Map}        Merged map.
 */
/**
 * Implodes a list separating list items by $separator.
 * @param  {List}    $list                  Sass list of misc items.
 * @param  {String}  $separator: ''         Separator string.
 * @param  {Boolean} $recursive: false      Optionally implode items of type list.
 * @return {String}                         Imploded list as string.
 */
/**
 * Defines a new constant.
 * Based on code by Hugo Giraudel, http://www.sitepoint.com/dealing-constants-sass/
 * @param  {String} $name  Name of new constant.
 * @param  {Misc}   $value Value of constant
 */
/**
 * Retrieves value of a constant.
 * Based on code by Hugo Giraudel, http://www.sitepoint.com/dealing-constants-sass/
 * @param  {String} $name Name of constant.
 * @return {Misc}         Value of constant.
 */
/**
 * Calculates a relative em value from $px relatively to $px-context.
 * @param  {px value} $px         Value.
 * @param  {px value} $px-context Context.
 * @return {em value}             Relative em value.
 */
/**
 * Calculates the percentage value of $px relatively to $px-context.
 * @param  {px value} $px          Part.
 * @param  {px value} $px-context  Context.
 * @return {% value}               Percentage value.
 */
/**
 * Returns rem value for $px relative to constan root font size.
 * @param  {px value}  $px Absolute pixel value.
 * @return {rem value}     Rem value relative to root font size.
 */
/**
 * Converts all px values in $list to em values based on $context.
 * @param  {List} $list   List of values.
 * @return {List}         List of modified values.
 */
/**
 * Sets one or multiple tone values for a color palette.
 * @param {String}              $palette        Name of color palette.
 * @param {String|Map}          $tone           Name of tone or–if no $value is given–map of tone-value pairs.
 * @param {Color value|Boolean} $value: false   Color value to be set for $tone.
 */
/**
 * Sets one or multiple tone values for a color palette.
 * @param {String}              $palette        Name of color palette.
 * @param {String|Map}          $tone           Name of tone or–if no $value is given–map of tone-value pairs.
 * @param {Color value|Boolean} $value: false   Color value to be set for $tone.
 */
/**
 * Returns a color value for a $tone from a defined $palette.
 * @param  {String} $palette         Name of palette.
 * @param  {String} $tone:   'base'  Name of tone, default to `base`.
 * @return {Misc}                    Color value.
 */
/**
 * Sets a base value and creates new absolute typographic context based on rem values.
 * @param  {px value}           $font-size                     Font size value, default is global $base__font-size.
 * @param  {px value|Boolean}   $line-height: 1.25*$font-size  Line height value, default is global $base__font-size
 * @param  {Booelan}            $set-styles:  true             Pass false to just switch type context without settings styles.
 */
/**
 * Changes the local type context without touching type base.
 * @param  {px value}         $font-size                     Font size value.
 * @param  {px value|Boolean} $line-height: 1.25*$font-size  Line height value, defaults to 1.25 times font size value.
 * @param  {Boolean}          $set-styles:  true             Pass false to just switch type context without setting styles.
 */
/**
 * Sets up layouts from map, initiates default layout, sets globals.
 * @param  {Map}    $layouts Map of layout definitions
 */
/**
 * Implements settings for layout defined by $layout-key locally for @content. Wraps @content in a media query if `breakpoint` settings are present in layout definition.
 * @param  {String} $layout-key: default       Layout key of layout which’s settings to be used as context for @content. Can contain modifiers like `up` or `down` to only use min- or max-values of breakpoints.
 */
/**
 * Builds layout map by extending the layout defined in $this-layout accordingly to inheritence defined through `extends` setting or a particular layout defined through $with-layout parameter.
 * @param  {String} $this-layout                      Key of the layout to be extended.
 * @param  {String|Boolean} $with-layout:   false     Optional layout key to be extended with $this-layout
 * @return {Map|Boolean}                              Returns map of extended layout or false, if a layout couldn’t be correctly retrieved from $LAYOUTS.
 */
/**
 * Extends layout with map $extension.
 * @param  {Map}    $extension              Map with additional layout settings.
 * @param  {String} $layout-key: 'default'  Key of layout to be retrieved and returned after extension.
 * @return {Map}                            Returns extended layout map for $layout-key.
 */
/**
 * Extends layout with map $extension.
 * @param  {Map}    $extension              Map with additional layout settings.
 * @param  {String} $layout-key: 'default'  Key of layout to be retrieved and returned after extension.
 */
/**
 * Retrieves a particular value from a group or a complete group or whole config from current or specified layout
 * @param  {String|Boolean} $group:     false         Group of settings to be retrieved. Set to `false` for all groups of a layout.
 * @param  {String|Boolean} $key:       false         Specifies particular setting to be retrieved. Set to `false` for all settings of a group.
 * @param  {String|Boolean} $of-layout: false         Defines layout settings will be retrieved from. Set to `false` to retrieve from current layout.
 * @return {CSS value|Map|Boolean}                    Returns a particular setting’s value, a map of settings, a layout map or false if requested resource doesn’t exist.
 */
.main-container {
  max-width: 1140px;
  margin-left: auto;
  margin-right: auto;
}

.main-container:after {
  content: " ";
  display: block;
  clear: both;
}

head {
  display: block;
  position: fixed;
  right: 10px;
  top: 10px;
  z-index: 999;
  color: #333;
  background: rgba(255, 255, 255, 0.25);
}

head:before {
  content: "|||";
  display: block;
  padding: 5px 10px;
  font-family: sans-serif;
  font-size: 16px;
  font-weight: bold;
}

head:hover {
  background: rgba(255, 255, 255, 0.5);
  color: red;
}

head:hover ~ .main-container,
head:hover ~ body .main-container {
  position: relative;
}

head:hover ~ .main-container:before,
head:hover ~ body .main-container:before {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  content: " ";
  z-index: 998;
  background-image: -webkit-linear-gradient( left , rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 80%, transparent 80%);
  background-image: -webkit-linear-gradient(left, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 80%, transparent 80%);
  background-image: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 80%, transparent 80%);
  background-size: 8.47458%;
  background-origin: content-box;
  background-clip: content-box;
  background-position: left top;
}

head:hover ~ .main-container,
head:hover ~ body .main-container {
  position: relative;
}

head:hover ~ .main-container:before,
head:hover ~ body .main-container:before {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  content: " ";
  z-index: 998;
  background-image: -webkit-linear-gradient( left , rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 80%, transparent 80%);
  background-image: -webkit-linear-gradient(left, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 80%, transparent 80%);
  background-image: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 80%, transparent 80%);
  background-size: 8.47458%;
  background-origin: content-box;
  background-clip: content-box;
  background-position: left top;
}

article {
  width: 66.10169%;
  float: left;
  margin-right: 1.69492%;
  background: blue;
}

aside {
  width: 32.20339%;
  float: right;
  margin-right: 0;
  background: red;
}

@media (min-width: 500px){
  .johnny-utah{
    content: 'Whoa.';
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
